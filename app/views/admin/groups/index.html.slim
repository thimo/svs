- provide(:title, "Groepen")

.card[data-scroll-position="group_members_index"]
  .card-header
    | #{@groups.size} Groepen

    .card-header-actions
      - if policy(Group).create?
        = link_to new_admin_group_path, title: "Groep toevoegen", class: "card-header-action"
          i.fa-file[class=fa_class]

  .card-body.p-0
    table.table.table-sm.tr-links
      thead
        tr
          th = Group.human_attribute_name(:name)
          th = Group.human_attribute_name(:members)

      tbody
        - @groups.each do |group|
          tr
            td.align-top
              - if policy(GroupMember.new(group: group)).create?
                .float-right
                  => link_to new_admin_group_group_member_path(group), title: "Groepslid toevoegen"
                    i.fa-plus-square.m-1.ml-2[class=fa_class]

              = link_to group.name, [:edit, :admin, group]
            td.p-0
              table.table.table-sm
                - if group.memberable_via_type.blank?
                  - group.group_members.active.sort_by { |gm| gm.member.last_name }.each do |group_member|
                    - member = group_member.member
                    tr
                      td.w-1.text-center.px-0
                        = render "members/photo", member: member
                      td
                        = render "members/member", member: member
                        .light
                          = group_member.description
                      td.w-1.text-nowrap
                        - if policy(group_member).edit?
                          => link_to edit_admin_group_member_path(group_member), title: "Aanpassen"
                            i.fa-pencil-alt.m-1.ml-2[class=fa_class]

                        - if policy(group_member).destroy?
                          => link_to admin_group_member_path(group_member),  method: :delete, data: { confirm: "#{group_member.member.name} wordt verwijderd uit de groep. Doorgaan?" }, title: "Verwijderen uit groep"
                            i.fa-times.m-1[class=fa_class]

                - else
                  - group.group_members.active.group_by(&:member).sort_by { |member, _gms| member.last_name }.each do |member, gms|
                    tr
                      td.w-1.text-center.px-0
                        = render "members/photo", member: member
                      td
                        = render "members/member", member: member
                        .light
                          = human_sort(gms.map { |gm| gm.memberable }, :name).map(&:name).uniq.join(", ")
